#include <SoftwareSerial.h>
#include <NewPing.h>
#include <Servo.h>

#define in1 5 //L298n Motor Driver pins.
#define in2 6
#define in3 9
#define in4 10
#define spoint 103 //servo motor starting point

#define Echo1 A0
#define Trig1 A1
#define Echo2 A2
#define Trig2 A3
#define motor A4  //servo motor

bool isMovingForward = false;
bool isMovingBackward = false;

String voice;

Servo servo;

int Left;
int Right;
int L = 0;
int R = 0;
int command; //Int to store app command state.
//int Speed = 200; // 0 - 255.

void setup()
{
  Serial.begin(9600);  //Set the baud rate to your Bluetooth module.
  pinMode(in1, OUTPUT);
  pinMode(in2, OUTPUT);
  pinMode(in3, OUTPUT);
  pinMode(in4, OUTPUT);
  pinMode(Trig1, OUTPUT);
  pinMode(Echo1, INPUT);
  pinMode(Trig2, OUTPUT);
  pinMode(Echo2, INPUT);
  servo.attach(motor);
}
void forward()
{
  isMovingForward = true;
  isMovingBackward = false;
  Serial.println("Entered Forward Function");
  digitalWrite(in1, HIGH);
  digitalWrite(in3, HIGH);
}

void back()
{
  isMovingForward = false;
  isMovingBackward = true;
  digitalWrite(in2, HIGH);
  digitalWrite(in4, HIGH);
}

void left()
{
  isMovingForward = false;
  isMovingBackward = false;
  L = leftsee();
  servo.write(spoint);
  if (L >= 10 )
  {
    digitalWrite(in3, HIGH);
    digitalWrite(in2, HIGH);
    delay(500);
    Stop();
  }
  else if (L < 10)
  {
    Stop();
  }
}

void right()
{
  isMovingForward = false;
  isMovingBackward = false;
  R = rightsee();
  servo.write(spoint);
  if (R >= 10 )
  {
    digitalWrite(in4, HIGH);
    digitalWrite(in1, HIGH);
    delay(500);
    Stop();
  }
  else if (L < 10)
  {
    Stop();
  }
}


int rightsee()
{
  servo.write(20);
  delay(800);
  Left = Right = ultrasonicFront();
  return Left;
}
int leftsee()
{
  servo.write(180);
  delay(800);
  Right = Right = ultrasonicFront();
  return Right;
}
int ultrasonicFront() {
  digitalWrite(Trig1, LOW);
  delayMicroseconds(4);
  digitalWrite(Trig1, HIGH);
  delayMicroseconds(10);
  digitalWrite(Trig1, LOW);
  long t = pulseIn(Echo1, HIGH);
  long cm = t / 29 / 2; //time convert distance
  return cm;
}

int ultrasonicRare() {
  digitalWrite(Trig2, LOW);
  delayMicroseconds(4);
  digitalWrite(Trig2, HIGH);
  delayMicroseconds(10);
  digitalWrite(Trig2, LOW);
  long t = pulseIn(Echo2, HIGH);
  long cm = t / 29 / 2; //time convert distance
  return cm;
}

void checkFrontObstacle() {
  int distance = ultrasonicFront();
  delay(50);
  if (distance <= 20) {  // Adjust the threshold distance as needed
    Serial.print("Object detected at ");
    Serial.print(distance);
    Serial.println(" cm. Stopping the car.");
    Stop();
  }
}

void checkRearObstacle() {
  int distance = ultrasonicRare();
  delay(50);
  if (distance <= 20) {  // Adjust the threshold distance as needed
    Serial.print("Object detected at ");
    Serial.print(distance);
    Serial.println(" cm. Stopping the car.");
    Stop();
  }
}

void Stop()
{
  isMovingForward = false;
  isMovingBackward = false;
  digitalWrite(in1, 0);
  digitalWrite(in2, 0);
  digitalWrite(in3, 0);
  digitalWrite(in4, 0);
}
void loop()
{
  while (Serial.available()) {
    delay(10);
    char c = Serial.read();
    if (c == '#')
    {
      break;
    }
    voice += c;
  }

  if (voice.length() > 0)
  {
    Serial.println(voice);
    if (voice == "*forward")
    {
      forward();
    }
    else if (voice == "*backward")
    {
      back() ;
    }
    else if (voice == "*left")
    {
      left() ;
    }
    else if (voice == "*right")
    {
      right() ;
    }
    else if (voice == "*control")
    {
      Stop() ;
    }
    //    else if (voice == "*dance")
    //    {
    //      dance() ;
    //    }
    //    else if (voice == "*circle")
    //    {
    //      circle() ;
    //    }

    voice = "";
  }
  Serial.println(voice);
  if (isMovingForward)
  {
    checkFrontObstacle();
  }
  else if (isMovingBackward)
  {
    checkRearObstacle();
  }
}